#ifdef Zad_8_KOL
#include <iostream>
#include <stdexcept>
#include <cstring>
#include <ctime>

using namespace std;

class KontoBankowe;

class Klient {
private:
	char nazwa[50];

public:
	void setNazwa(const char* nazwa) {
		if (strlen(nazwa) >= sizeof(this->nazwa)) {
			throw invalid_argument("Nazwa jest za dluga.");
		}
		strncpy_s(this->nazwa, sizeof(this->nazwa), nazwa, 49);
	}

	// Getter dla nazwy
	const char* getNazwa() const {
		return nazwa;
	}

	Klient() {};
	Klient(const char* nazwa) {
		setNazwa(nazwa);
	}

	KontoBankowe* createKontoBankowe() const;
};

class KontoBankowe {
private:
	static int liczbaAktywnychKont;
	char numerKonta[27];
	double stanKonta;
	bool aktywne;
	const Klient* klient; // Użycie wskaźnika do stałego klienta

public:
	KontoBankowe(const char* numerKonta, double stanKonta, bool aktywne, const Klient* klient) {
		setNumerKonta(numerKonta);
		this->stanKonta = stanKonta;
		this->aktywne = aktywne;
		this->klient = klient;
		if (aktywne) {
			liczbaAktywnychKont++;
		}
	}

	~KontoBankowe() {
		if (aktywne) {
			liczbaAktywnychKont--;
		}
	}

	void setKlient(const Klient* klient) {
		this->klient = klient;
	}

	void setNumerKonta(const char* numerKonta) {
		if (strlen(numerKonta) != 26) {
			throw invalid_argument("Numer konta powinien mieć dokładnie 26 cyfr.");
		}
		strcpy_s(this->numerKonta, sizeof(this->numerKonta), numerKonta);
	}

	// Metoda zwracająca numer konta
	const char* getNumerKonta() const {
		return numerKonta;
	}

	// Metoda ustawiająca stan konta
	void setStanKonta(double stanKonta) {
		this->stanKonta = stanKonta;
	}

	// Metoda zwracająca stan konta
	double getStanKonta() const {
		return stanKonta;
	}

	// Metoda ustawiająca aktywność konta
	void setAktywne(bool aktywne) {
		if (this->aktywne != aktywne) {
			this->aktywne = aktywne;
			if (aktywne) {
				liczbaAktywnychKont++;
			}
			else {
				liczbaAktywnychKont--;
			}
		}
	}

	// Metoda sprawdzająca czy konto jest aktywne
	bool isAktywne() const {
		return aktywne;
	}

	// Metoda zwracająca wskaźnik do klienta
	const Klient* getKlient() const {
		return klient;
	}

	KontoBankowe& operator+=(double kwota) {
		if (kwota < 0) {
			throw invalid_argument("Kwota musi być dodatnia.");
		}
		stanKonta += kwota;
		return *this;
	}

	friend ostream& operator<<(ostream& os, const KontoBankowe& konto) {
		os << "[" << konto.numerKonta << "] ";
		if (konto.aktywne) {
			os << konto.klient->getNazwa() << " : " << konto.stanKonta;
		}
		else {
			os << "NIEAKTYWNE";
		}
		return os;
	}

	virtual void obliczPrognozeStanuKonta() const {
		// Dla zwykłego konta bankowego nie ma oprocentowania, więc prognoza będzie brak zmiany
		cout << "Prognoza stanu konta za rok: " << stanKonta << endl;
	}

	operator double() const {
		return stanKonta;
	}
};

class KontoOszczednosciowe : public KontoBankowe {
private:
	int oprocentowanie;

public:
	KontoOszczednosciowe(const KontoBankowe& konto, int oprocentowanie)
		: KontoBankowe(konto.getNumerKonta(), konto.getStanKonta(), konto.isAktywne(), konto.getKlient()),
		oprocentowanie(oprocentowanie) {
		if (oprocentowanie < 0) {
			throw invalid_argument("Oprocentowanie nie może być ujemne.");
		}
	}

	void obliczPrognozeStanuKonta() const override {
		double nowyStan = getStanKonta() * (1 + oprocentowanie / 100.0);
		cout << "Prognoza stanu konta za rok z oprocentowaniem " << oprocentowanie << "%: " << nowyStan << endl;
	}
};

int KontoBankowe::liczbaAktywnychKont = 0;

KontoBankowe* Klient::createKontoBankowe() const {
	// Generowanie losowego numeru konta (na potrzeby przykładu)
	char numerKonta[27];
	srand(static_cast<unsigned int>(time(nullptr)));
	const char charset[] = "0123456789";
	for (size_t i = 0; i < 26; ++i) {
		numerKonta[i] = charset[rand() % (sizeof(charset) - 1)];
	}
	numerKonta[26] = '\0';

	// Tworzenie nowego konta bankowego
	return new KontoBankowe(numerKonta, 0.0, true, this); // Konto aktywne, zerowy stan
}

int main() {
	cout << "XD" << endl;
	Klient klient("Jan");
	KontoBankowe konto("12345678901234567890123456", 1000.0, true, &klient);

	cout << "Stan konta przed operacją: " << konto.getStanKonta() << endl;

	konto += 500.0;

	cout << "Stan konta po dodaniu 500.0: " << konto.getStanKonta() << endl;

	konto.setAktywne(false);

	cout << "Informacje o koncie: " << konto << endl;

	Klient klient2("Anna");
	KontoBankowe* konto1 = klient2.createKontoBankowe();

	cout << "Informacje o nowym koncie: " << *konto1 << endl;

	delete konto1; // Pamiętaj o usunięciu dynamicznie przydzielonej pamięci

	return 0;
}


#endif
