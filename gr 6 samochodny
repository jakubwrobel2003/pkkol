class Samochod {
private:
	char rejestracja[9];
	int licznik;
	bool dopuszczony;
	static int nr;
	Wlasciciel* w;

	void setNrrejestrcji(int nr) {
		if (nr >= 10000) {
			this->rejestracja[4] = nr / 10000;
		}
		else {
			this->rejestracja[4] = 0;
		}
		if (nr >= 1000) {
			this->rejestracja[5] = (nr / 1000) % 10;
		}
		else {
			this->rejestracja[5] = 0;
		}
		if (nr >= 100) {
			this->rejestracja[6] = (nr / 100) % 10;
		}
		else {
			this->rejestracja[6] = 0;
		}
		if (nr >= 10) {
			this->rejestracja[7] = (nr / 10) % 10;
		}
		else {
			this->rejestracja[7] = 0;
		}

		this->rejestracja[8] = nr % 10;
	}

public:
	Samochod(const char* rej, int l, bool d, Wlasciciel* w) {
		if (strlen(rej) != 3) {
			throw invalid_argument("Numer rejestracyjny powinien składać się z 3 liter.");
		}
		this->setDopuszczony(d);
		this->rejestracja[0] = rej[0];
		this->rejestracja[1] = rej[1];
		this->rejestracja[2] = rej[2];
		this->rejestracja[3] = '-';
		setNrrejestrcji(++nr);
		this->setWlasciciel(w);
		this->setLicznik(l);
	}

	void setWlasciciel(Wlasciciel* w) {
		this->w = w;
	}

	Wlasciciel* getWlasciciel() {
		return this->w;
	}

	void setLicznik(int l) {
		if (l < 0) {
			throw invalid_argument("Licznik nie moze byc ujemny");
		}
		licznik = l;
	}

	int getLicznik() const {
		return licznik;
	}

	void setDopuszczony(bool d) {
		dopuszczony = d;
	}

	bool isDopuszczony() const {
		return dopuszczony;
	}

	virtual double zasieg() const {
		return 800;
	}

	virtual double wartoscSamochodu(double WAR_POCZ) const {
		double WSP_SPARW = dopuszczony ? 1.0 : 0.2;
		double wartosc = (WAR_POCZ - 0.1 * licznik) * WSP_SPARW;
		if (wartosc < 400.0) {
			wartosc = 400.0;
		}
		return wartosc;
	}

	bool operator==(const Samochod& other) const {
		bool sameRejestracja = (strncmp(rejestracja, other.rejestracja, 3) == 0);
		bool similarLicznik = (licznik / 10 == other.licznik / 10);
		return sameRejestracja && similarLicznik;
	}
};

class SamochodElektryczny : public Samochod {
private:
	int stanBateri;

public:
	SamochodElektryczny(const char* rej, int l, bool d, Wlasciciel* w) : Samochod(rej, l, d, w) {
		// Dodatkowe inicjalizacje, jeśli potrzebne
	}

	void setStanBaterii(int s) {
		if (s < 0 || s > 100) {
			throw invalid_argument("Zla wartosc");
		}
		else {
			stanBateri = s;
		}
	}

	int getStanBateri() {
		return stanBateri;
	}

	double zasieg() const override {
		return stanBateri * 2.5;
	}
};

int Samochod::nr = 0;

int main() {
	// Tworzenie właścicieli
	Wlasciciel wlasciciel1("Kowalski");
	Wlasciciel wlasciciel2("Nowak");

	try {
		// Tworzenie samochodów
		Samochod samochod1("ABC", 50000, true, &wlasciciel1);
		Samochod samochod2("DEF", 30000, false, &wlasciciel2);

		// Tworzenie samochodów elektrycznych
		SamochodElektryczny elektryczny1("EFG", 40000, true, &wlasciciel1);
		elektryczny1.setStanBaterii(80);

		SamochodElektryczny elektryczny2("HIJ", 20000, true, &wlasciciel2);
		elektryczny2.setStanBaterii(50);

		// Testowanie operatora ==
		cout << "Samochod 1 == Samochod 2? " << (samochod1 == samochod2 ? "Tak" : "Nie") << endl;
		cout << "Elektryczny 1 == Elektryczny 2? " << (elektryczny1 == elektryczny2 ? "Tak" : "Nie") << endl;
	}
	catch (const invalid_argument& e) {
		cerr << "Blad: " << e.what() << endl;
	}

	return 0;
}
#endif
